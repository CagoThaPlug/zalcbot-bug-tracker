name: Manual Kanban Test

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to check and update'
        required: true
        type: string

jobs:
  test-single-issue:
    runs-on: ubuntu-latest
    
    steps:
      - name: Get Issue Timeline
        id: timeline
        run: |
          ISSUE_NUMBER="${{ github.event.inputs.issue_number }}"
          echo "Checking timeline for issue #$ISSUE_NUMBER..."
          
          # Get timeline with detailed output
          TIMELINE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/timeline")
          
          echo "Full timeline:"
          echo "$TIMELINE" | jq '.'
          
          # Find project movements
          echo "Project movements:"
          echo "$TIMELINE" | jq '[.[] | select(.event == "moved_columns_in_project" or .event == "added_to_project")]'
          
          # Get the latest column
          LATEST_COLUMN=$(echo "$TIMELINE" | jq -r '
            [.[] | select(.event == "moved_columns_in_project" or .event == "added_to_project")] | 
            if length > 0 then 
              sort_by(.created_at) | last | .project_card.column_name 
            else 
              "none" 
            end')
          
          echo "Latest column: $LATEST_COLUMN"
          echo "latest_column=$LATEST_COLUMN" >> $GITHUB_OUTPUT

      - name: Update Labels Based on Column
        run: |
          ISSUE_NUMBER="${{ github.event.inputs.issue_number }}"
          LATEST_COLUMN="${{ steps.timeline.outputs.latest_column }}"
          
          if [ "$LATEST_COLUMN" = "none" ] || [ "$LATEST_COLUMN" = "null" ]; then
            echo "No project column found for issue #$ISSUE_NUMBER"
            exit 0
          fi
          
          # Map column to label
          case "$LATEST_COLUMN" in
            "Backlog")
              NEW_LABEL="backlog"
              ;;
            "Ready")
              NEW_LABEL="ready"
              ;;
            "In Progress")
              NEW_LABEL="in-progress"
              ;;
            "In Review")
              NEW_LABEL="in-review"
              ;;
            "Done")
              NEW_LABEL="done"
              ;;
            *)
              echo "Unknown column: $LATEST_COLUMN"
              exit 0
              ;;
          esac
          
          echo "Updating issue #$ISSUE_NUMBER to label: $NEW_LABEL"
          
          # Remove old status labels
          STATUS_LABELS=("backlog" "ready" "in-progress" "in-review" "done")
          for label in "${STATUS_LABELS[@]}"; do
            echo "Removing label: $label"
            curl -s -X DELETE \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/$label" || true
          done
          
          # Add new label
          echo "Adding label: $NEW_LABEL"
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
            -d "{\"labels\":[\"$NEW_LABEL\"]}"
          
          # Handle issue state
          if [ "$NEW_LABEL" = "done" ]; then
            echo "Closing issue (moved to Done)"
            curl -s -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER" \
              -d '{"state":"closed"}'
          else
            echo "Ensuring issue is open"
            curl -s -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER" \
              -d '{"state":"open"}'
          fi
