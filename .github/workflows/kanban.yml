name: Activity Log Kanban Management

permissions:
  issues: write
  contents: read

on:
  issues:
    types: [opened, closed, reopened]
  schedule:
    # Check activity logs every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        default: 'check_recent_activity'
        options:
          - 'check_recent_activity'
          - 'update_existing_issues'
          - 'check_single_issue'
      issue_number:
        description: 'Issue number (for single issue check)'
        required: false

jobs:
  # Handle new issues - automatically get backlog
  assign-new-issues:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    
    steps:
      - name: Add Backlog Label to New Issues
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          echo "üÜï Adding backlog label to new issue #$ISSUE_NUMBER"
          
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
            -d '{"labels":["backlog"]}'

  # Handle closed/reopened issues
  handle-state-changes:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && (github.event.action == 'closed' || github.event.action == 'reopened')
    
    steps:
      - name: Update Status for State Changes
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          ACTION="${{ github.event.action }}"
          
          echo "üîÑ Issue #$ISSUE_NUMBER was $ACTION"
          
          if [ "$ACTION" = "closed" ]; then
            echo "üîí Setting closed issue to 'done'"
            
            # Remove other status labels
            for label in backlog ready in-progress in-review; do
              curl -s -X DELETE \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/$label" 2>/dev/null || true
            done
            
            # Add done label
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
              -d '{"labels":["done"]}'
              
          elif [ "$ACTION" = "reopened" ]; then
            echo "üîì Setting reopened issue back to 'backlog'"
            
            # Remove done label
            curl -s -X DELETE \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/done" 2>/dev/null || true
            
            # Add backlog label
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
              -d '{"labels":["backlog"]}'
          fi

  # Monitor activity logs for project movements
  check-activity-logs:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'check_recent_activity')
    
    steps:
      - name: Check Activity Logs for Project Movements
        run: |
          echo "üîç Checking issue activity logs for project movements..."
          
          # Get recently updated issues (last 2 hours for scheduled, last week for manual)
          if [ "${{ github.event_name }}" = "schedule" ]; then
            SINCE=$(date -u -d '2 hours ago' +%Y-%m-%dT%H:%M:%SZ)
            echo "üìÖ Scheduled run - checking issues updated since: $SINCE"
            ISSUES_URL="https://api.github.com/repos/${{ github.repository }}/issues?state=open&since=$SINCE&sort=updated&per_page=50"
          else
            echo "üîß Manual run - checking last 50 updated issues"
            ISSUES_URL="https://api.github.com/repos/${{ github.repository }}/issues?state=all&sort=updated&per_page=50"
          fi
          
          # Get issues to check
          ISSUES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$ISSUES_URL" | jq -r '.[].number')
          
          echo "üìã Issues to check: $ISSUES"
          
          for issue_number in $ISSUES; do
            echo ""
            echo "üîé Checking issue #$issue_number activity log..."
            
            # Get issue timeline (activity log)
            TIMELINE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$issue_number/timeline")
            
            # Debug: Show what timeline events we're getting
            echo "üìä Timeline events found:"
            echo "$TIMELINE" | jq -r '.[] | select(.event == "moved_columns_in_project" or .event == "added_to_project") | "  " + .created_at + " - " + .event + " - Column: " + (.project_card.column_name // "null")'
            
            # Find the most recent project column movement
            LATEST_MOVEMENT=$(echo "$TIMELINE" | jq -r '
              [.[] | select(.event == "moved_columns_in_project" or .event == "added_to_project") | select(.project_card.column_name != null)] | 
              if length > 0 then 
                sort_by(.created_at) | last
              else 
                null 
              end')
            
            if [ "$LATEST_MOVEMENT" != "null" ]; then
              LATEST_COLUMN=$(echo "$LATEST_MOVEMENT" | jq -r '.project_card.column_name')
              MOVEMENT_TIME=$(echo "$LATEST_MOVEMENT" | jq -r '.created_at')
              
              echo "üìç Latest movement: '$LATEST_COLUMN' at $MOVEMENT_TIME"
              
              # Map column name to label
              case "$LATEST_COLUMN" in
                "Backlog")
                  EXPECTED_LABEL="backlog"
                  ;;
                "Ready")
                  EXPECTED_LABEL="ready"
                  ;;
                "In Progress")
                  EXPECTED_LABEL="in-progress"
                  ;;
                "In Review")
                  EXPECTED_LABEL="in-review"
                  ;;
                "Done")
                  EXPECTED_LABEL="done"
                  ;;
                *)
                  echo "‚ùì Unknown column name: '$LATEST_COLUMN' - skipping"
                  continue
                  ;;
              esac
              
              # Get current labels
              CURRENT_LABELS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$issue_number" | \
                jq -r '.labels[].name')
              
              echo "üè∑Ô∏è  Current labels: $(echo "$CURRENT_LABELS" | tr '\n' ', ')"
              echo "üéØ Expected label: $EXPECTED_LABEL"
              
              # Check if we need to update
              if echo "$CURRENT_LABELS" | grep -q "^$EXPECTED_LABEL$"; then
                echo "‚úÖ Issue #$issue_number already has correct label ($EXPECTED_LABEL)"
              else
                echo "üîÑ Updating issue #$issue_number from column '$LATEST_COLUMN' to label '$EXPECTED_LABEL'"
                
                # Remove all existing status labels
                echo "üóëÔ∏è  Removing old status labels..."
                for label in backlog ready in-progress in-review done; do
                  if echo "$CURRENT_LABELS" | grep -q "^$label$"; then
                    echo "  ‚ùå Removing: $label"
                    curl -s -X DELETE \
                      -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      -H "Accept: application/vnd.github.v3+json" \
                      "https://api.github.com/repos/${{ github.repository }}/issues/$issue_number/labels/$label" || true
                  fi
                done
                
                # Add new status label
                echo "  ‚ûï Adding: $EXPECTED_LABEL"
                curl -s -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Content-Type: application/json" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/$issue_number/labels" \
                  -d "{\"labels\":[\"$EXPECTED_LABEL\"]}"
                
                # Handle issue state changes
                if [ "$EXPECTED_LABEL" = "done" ]; then
                  echo "  üîí Closing issue (moved to Done column)"
                  curl -s -X PATCH \
                    -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Accept: application/vnd.github.v3+json" \
                    -H "Content-Type: application/json" \
                    "https://api.github.com/repos/${{ github.repository }}/issues/$issue_number" \
                    -d '{"state":"closed"}'
                else
                  echo "  üîì Ensuring issue is open"
                  curl -s -X PATCH \
                    -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Accept: application/vnd.github.v3+json" \
                    -H "Content-Type: application/json" \
                    "https://api.github.com/repos/${{ github.repository }}/issues/$issue_number" \
                    -d '{"state":"open"}'
                fi
                
                echo "‚úÖ Issue #$issue_number updated successfully!"
              fi
            else
              echo "üìù No project movements found in activity log for issue #$issue_number"
            fi
            
            # Small delay to avoid rate limiting
            sleep 1
          done
          
          echo ""
          echo "üéâ Activity log check completed!"

  # Check single issue activity (manual only)
  check-single-issue:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.action == 'check_single_issue' && 
      github.event.inputs.issue_number != ''
    
    steps:
      - name: Detailed Activity Log Check
        run: |
          ISSUE_NUMBER="${{ github.event.inputs.issue_number }}"
          echo "üîç Detailed activity log check for issue #$ISSUE_NUMBER"
          echo "=================================================="
          
          # Get issue details
          ISSUE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER")
          
          echo "üìä Issue Details:"
          echo "  Title: $(echo "$ISSUE_DATA" | jq -r '.title')"
          echo "  State: $(echo "$ISSUE_DATA" | jq -r '.state')"
          echo "  Labels: $(echo "$ISSUE_DATA" | jq -r '.labels[].name' | tr '\n' ', ' | sed 's/,$//')"
          echo ""
          
          # Get full timeline
          TIMELINE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/timeline")
          
          echo "üìã Complete Activity Log:"
          echo "$TIMELINE" | jq -r '.[] | 
            if .event == "moved_columns_in_project" then
              "  " + .created_at + " - @" + .actor.login + " moved from " + (.project_card.previous_column_name // "unknown") + " to " + (.project_card.column_name // "unknown") + " in " + (.project_card.project_name // "project")
            elif .event == "added_to_project" then  
              "  " + .created_at + " - @" + .actor.login + " added to " + (.project_card.column_name // "unknown") + " in " + (.project_card.project_name // "project")
            elif .event == "labeled" then
              "  " + .created_at + " - @" + .actor.login + " added label: " + .label.name
            elif .event == "unlabeled" then
              "  " + .created_at + " - @" + .actor.login + " removed label: " + .label.name
            elif .event == "closed" or .event == "reopened" then
              "  " + .created_at + " - @" + .actor.login + " " + .event + " the issue"
            else
              empty
            end'
          
          echo ""
          echo "üéØ Project Movement Analysis:"
          MOVEMENTS=$(echo "$TIMELINE" | jq '[.[] | select(.event == "moved_columns_in_project" or .event == "added_to_project") | select(.project_card.column_name != null)]')
          
          if [ "$(echo "$MOVEMENTS" | jq length)" -gt 0 ]; then
            echo "$MOVEMENTS" | jq -r '.[] | "  " + .created_at + " ‚Üí " + .project_card.column_name'
            
            LATEST_COLUMN=$(echo "$MOVEMENTS" | jq -r 'sort_by(.created_at) | last | .project_card.column_name')
            echo ""
            echo "üìç Latest Column: $LATEST_COLUMN"
            
            # Show what label should be set
            case "$LATEST_COLUMN" in
              "Backlog") echo "üè∑Ô∏è  Should have label: backlog" ;;
              "Ready") echo "üè∑Ô∏è  Should have label: ready" ;;
              "In Progress") echo "üè∑Ô∏è  Should have label: in-progress" ;;
              "In Review") echo "üè∑Ô∏è  Should have label: in-review" ;;
              "Done") echo "üè∑Ô∏è  Should have label: done (and be closed)" ;;
              *) echo "‚ùì Unknown column - no label mapping" ;;
            esac
          else
            echo "  No project movements found in activity log"
          fi

  # Update existing issues (manual only)
  update-existing:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'update_existing_issues'
    
    steps:
      - name: Update All Existing Issues
        run: |
          echo "üîÑ Updating all existing issues with default labels..."
          
          # Get all open issues without status labels
          echo "üìã Processing open issues..."
          OPEN_ISSUES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues?state=open&per_page=100" | \
            jq -r '.[] | select(.labels | map(.name) | index("backlog") == null and index("ready") == null and index("in-progress") == null and index("in-review") == null and index("done") == null) | .number')
          
          for issue in $OPEN_ISSUES; do
            echo "Adding backlog label to open issue #$issue"
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$issue/labels" \
              -d '{"labels":["backlog"]}'
            sleep 0.5
          done
          
          # Get all closed issues without status labels
          echo "üìã Processing closed issues..."
          CLOSED_ISSUES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues?state=closed&per_page=50" | \
            jq -r '.[] | select(.labels | map(.name) | index("backlog") == null and index("ready") == null and index("in-progress") == null and index("in-review") == null and index("done") == null) | .number')
          
          for issue in $CLOSED_ISSUES; do
            echo "Adding done label to closed issue #$issue"
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$issue/labels" \
              -d '{"labels":["done"]}'
            sleep 0.5
          done
          
          echo "‚úÖ All existing issues have been updated!"
