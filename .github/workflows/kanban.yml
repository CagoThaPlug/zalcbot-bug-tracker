name: Universal Project Debug

permissions:
  issues: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to debug'
        required: true

jobs:
  debug-all-project-types:
    runs-on: ubuntu-latest
    
    steps:
      - name: Debug GraphQL Response
        run: |
          ISSUE_NUMBER="${{ github.event.inputs.issue_number }}"
          echo "🔍 Full debugging for issue #$ISSUE_NUMBER"
          echo "Repository: ${{ github.repository }}"
          echo "=================================================="
          
          # First, let's see the raw GraphQL response
          GRAPHQL_QUERY='{
            "query": "query($owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                projectsV2(first: 10) {
                  nodes {
                    id
                    title
                    number
                  }
                }
              }
            }",
            "variables": {
              "owner": "'$(echo ${{ github.repository }} | cut -d'/' -f1)'",
              "repo": "'$(echo ${{ github.repository }} | cut -d'/' -f2)'"
            }
          }'
          
          echo "🌐 Making GraphQL query for Projects V2..."
          echo "Query: $GRAPHQL_QUERY"
          
          PROJECTS_RESPONSE=$(curl -s -X POST \
            -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://api.github.com/graphql" \
            -d "$GRAPHQL_QUERY")
          
          echo ""
          echo "📄 Raw GraphQL Response:"
          echo "$PROJECTS_RESPONSE" | jq '.'
          
          # Check if there's an error
          if echo "$PROJECTS_RESPONSE" | jq -e '.errors' > /dev/null; then
            echo ""
            echo "❌ GraphQL Errors found:"
            echo "$PROJECTS_RESPONSE" | jq '.errors'
          fi

      - name: Check Classic Projects (REST API)
        run: |
          echo ""
          echo "🔍 Checking for Classic Projects (REST API)..."
          
          CLASSIC_PROJECTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/projects" 2>/dev/null || echo "[]")
          
          echo "📋 Classic Projects Response:"
          echo "$CLASSIC_PROJECTS" | jq '.'
          
          if [ "$(echo "$CLASSIC_PROJECTS" | jq length)" -gt 0 ]; then
            echo ""
            echo "✅ Found $(echo "$CLASSIC_PROJECTS" | jq length) Classic Project(s):"
            echo "$CLASSIC_PROJECTS" | jq -r '.[] | "- " + .name + " (ID: " + (.id | tostring) + ")"'
            
            # For each classic project, get columns
            echo "$CLASSIC_PROJECTS" | jq -r '.[0].id' | while read project_id; do
              if [ -n "$project_id" ] && [ "$project_id" != "null" ]; then
                echo ""
                echo "🗂️ Columns in Classic Project $project_id:"
                COLUMNS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/projects/$project_id/columns")
                
                echo "$COLUMNS" | jq -r '.[] | "  - " + .name + " (ID: " + (.id | tostring) + ")"'
                
                # For each column, check for cards
                echo "$COLUMNS" | jq -r '.[0].id' | while read column_id; do
                  if [ -n "$column_id" ] && [ "$column_id" != "null" ]; then
                    echo ""
                    echo "🃏 Cards in first column ($column_id):"
                    CARDS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      -H "Accept: application/vnd.github.v3+json" \
                      "https://api.github.com/projects/columns/$column_id/cards")
                    
                    echo "$CARDS" | jq -r '.[] | 
                      if .content_url then 
                        "  - Card: " + (.content_url | split("/") | last) 
                      else 
                        "  - Note card: " + (.note // "no note")
                      end'
                  fi
                done
              fi
            done
          else
            echo "❌ No Classic Projects found"
          fi

      - name: Check Organization Projects
        run: |
          echo ""
          echo "🔍 Checking for Organization-level Projects..."
          
          ORG_NAME=$(echo ${{ github.repository }} | cut -d'/' -f1)
          
          # Try to get organization projects
          ORG_PROJECTS_QUERY='{
            "query": "query($org: String!) {
              organization(login: $org) {
                projectsV2(first: 10) {
                  nodes {
                    id
                    title
                    number
                  }
                }
              }
            }",
            "variables": {
              "org": "'$ORG_NAME'"
            }
          }'
          
          echo "🌐 Checking organization projects for: $ORG_NAME"
          
          ORG_RESPONSE=$(curl -s -X POST \
            -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://api.github.com/graphql" \
            -d "$ORG_PROJECTS_QUERY")
          
          echo "📄 Organization Projects Response:"
          echo "$ORG_RESPONSE" | jq '.'
          
          if echo "$ORG_RESPONSE" | jq -e '.data.organization.projectsV2.nodes | length > 0' > /dev/null 2>&1; then
            echo ""
            echo "✅ Found organization projects:"
            echo "$ORG_RESPONSE" | jq -r '.data.organization.projectsV2.nodes[] | "- " + .title + " (ID: " + .id + ")"'
          fi

      - name: Check User Projects
        run: |
          echo ""
          echo "🔍 Checking for User-level Projects..."
          
          USER_NAME=$(echo ${{ github.repository }} | cut -d'/' -f1)
          
          USER_PROJECTS_QUERY='{
            "query": "query($user: String!) {
              user(login: $user) {
                projectsV2(first: 10) {
                  nodes {
                    id
                    title
                    number
                  }
                }
              }
            }",
            "variables": {
              "user": "'$USER_NAME'"
            }
          }'
          
          echo "🌐 Checking user projects for: $USER_NAME"
          
          USER_RESPONSE=$(curl -s -X POST \
            -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://api.github.com/graphql" \
            -d "$USER_PROJECTS_QUERY")
          
          echo "📄 User Projects Response:"
          echo "$USER_RESPONSE" | jq '.'
          
          if echo "$USER_RESPONSE" | jq -e '.data.user.projectsV2.nodes | length > 0' > /dev/null 2>&1; then
            echo ""
            echo "✅ Found user projects:"
            echo "$USER_RESPONSE" | jq -r '.data.user.projectsV2.nodes[] | "- " + .title + " (ID: " + .id + ")"'
          fi

      - name: Final Analysis and Recommendations
        run: |
          echo ""
          echo "🎯 Analysis and Recommendations:"
          echo "=================================================="
          echo ""
          echo "Based on the API responses above, here's what we found:"
          echo ""
          echo "1. **Repository Projects (Beta)**: Check the first GraphQL response"
          echo "2. **Classic Projects**: Check the REST API response" 
          echo "3. **Organization Projects (Beta)**: Check the org GraphQL response"
          echo "4. **User Projects (Beta)**: Check the user GraphQL response"
          echo ""
          echo "💡 **Next Steps:**"
          echo ""
          echo "If you see Classic Projects listed above:"
          echo "- We can use the REST API timeline approach (but it has limitations)"
          echo "- Consider migrating to Projects (Beta) for better API support"
          echo ""
          echo "If you see Projects (Beta) listed above:"
          echo "- We can use the GraphQL API approach (recommended)"
          echo "- The project might be at user or organization level, not repository level"
          echo ""
          echo "If no projects found:"
          echo "- Create a new GitHub Project (Beta) and link it to this repository"
          echo "- Or use the comment-based hybrid approach we discussed"
          echo ""
          echo "🔗 **Your project board URL format:**"
          echo "- Classic Projects: github.com/${{ github.repository }}/projects/X"
          echo "- Projects (Beta): github.com/users/USERNAME/projects/X or github.com/orgs/ORGNAME/projects/X"
