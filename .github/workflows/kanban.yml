name: Hybrid Kanban Management

permissions:
  issues: write
  contents: read

on:
  issues:
    types: [opened, closed, reopened]
  issue_comment:
    types: [created]
  schedule:
    # Check for inconsistencies every 10 minutes
    - cron: '*/10 * * * *'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        default: 'sync_all_labels'
        options:
          - 'sync_all_labels'
          - 'update_existing_issues'
          - 'check_single_issue'
      issue_number:
        description: 'Issue number (for single issue check)'
        required: false

jobs:
  # Handle new issues - automatically get backlog
  assign-new-issues:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    
    steps:
      - name: Add Backlog Label to New Issues
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          echo "üÜï Adding backlog label to new issue #$ISSUE_NUMBER"
          
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
            -d '{"labels":["backlog"]}'

  # Handle closed/reopened issues
  handle-state-changes:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && (github.event.action == 'closed' || github.event.action == 'reopened')
    
    steps:
      - name: Update Status for State Changes
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          ACTION="${{ github.event.action }}"
          
          echo "üîÑ Issue #$ISSUE_NUMBER was $ACTION"
          
          if [ "$ACTION" = "closed" ]; then
            echo "üîí Setting closed issue to 'done'"
            
            # Remove other status labels
            for label in backlog ready in-progress in-review; do
              curl -s -X DELETE \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/$label" 2>/dev/null || true
            done
            
            # Add done label
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
              -d '{"labels":["done"]}'
              
          elif [ "$ACTION" = "reopened" ]; then
            echo "üîì Setting reopened issue back to 'backlog'"
            
            # Remove done label
            curl -s -X DELETE \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/done" 2>/dev/null || true
            
            # Add backlog label
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
              -d '{"labels":["backlog"]}'
          fi

  # Handle manual status commands via comments
  handle-status-commands:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' && 
      github.event.action == 'created' && 
      contains(github.event.comment.body, '/status')
    
    steps:
      - name: Parse and Apply Status Command
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          COMMENT_BODY="${{ github.event.comment.body }}"
          COMMENTER="${{ github.event.comment.user.login }}"
          
          echo "üí¨ Status command from @$COMMENTER on issue #$ISSUE_NUMBER"
          
          # Parse the status command
          NEW_STATUS=""
          if echo "$COMMENT_BODY" | grep -qi "/status backlog"; then
            NEW_STATUS="backlog"
          elif echo "$COMMENT_BODY" | grep -qi "/status ready"; then
            NEW_STATUS="ready"
          elif echo "$COMMENT_BODY" | grep -qi "/status in-progress\|/status progress"; then
            NEW_STATUS="in-progress"
          elif echo "$COMMENT_BODY" | grep -qi "/status in-review\|/status review"; then
            NEW_STATUS="in-review"
          elif echo "$COMMENT_BODY" | grep -qi "/status done\|/status complete"; then
            NEW_STATUS="done"
          fi
          
          if [ -n "$NEW_STATUS" ]; then
            echo "üè∑Ô∏è  Updating issue #$ISSUE_NUMBER to status: $NEW_STATUS"
            
            # Remove all existing status labels
            for label in backlog ready in-progress in-review done; do
              curl -s -X DELETE \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/$label" 2>/dev/null || true
            done
            
            # Add new status label
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
              -d "{\"labels\":[\"$NEW_STATUS\"]}"
            
            # Handle issue state
            if [ "$NEW_STATUS" = "done" ]; then
              curl -s -X PATCH \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Content-Type: application/json" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER" \
                -d '{"state":"closed"}'
            else
              curl -s -X PATCH \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Content-Type: application/json" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER" \
                -d '{"state":"open"}'
            fi
            
            # Add confirmation reaction and comment
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions" \
              -d '{"content":"rocket"}' > /dev/null
            
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/comments" \
              -d "{\"body\":\"‚úÖ Status updated to **$NEW_STATUS** by @$COMMENTER\"}" > /dev/null
            
            echo "‚úÖ Status updated successfully!"
          fi

  # Smart label synchronization (scheduled and manual)
  sync-labels:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'sync_all_labels')
    
    steps:
      - name: Smart Label Sync
        run: |
          echo "üîÑ Starting smart label synchronization..."
          
          # Get recently updated issues for scheduled runs, all for manual
          if [ "${{ github.event_name }}" = "schedule" ]; then
            SINCE=$(date -u -d '30 minutes ago' +%Y-%m-%dT%H:%M:%SZ)
            echo "üìÖ Scheduled sync - checking issues updated since: $SINCE"
            ISSUES_URL="https://api.github.com/repos/${{ github.repository }}/issues?state=all&since=$SINCE&sort=updated&per_page=50"
          else
            echo "üîß Manual sync - checking all recent issues"
            ISSUES_URL="https://api.github.com/repos/${{ github.repository }}/issues?state=all&sort=updated&per_page=100"
          fi
          
          ISSUES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$ISSUES_URL")
          
          echo "üìä Found $(echo "$ISSUES" | jq length) issues to check"
          
          echo "$ISSUES" | jq -c '.[]' | while IFS= read -r issue; do
            ISSUE_NUMBER=$(echo "$issue" | jq -r '.number')
            ISSUE_STATE=$(echo "$issue" | jq -r '.state')
            LABELS=$(echo "$issue" | jq -r '.labels[].name')
            
            echo ""
            echo "üîç Checking issue #$ISSUE_NUMBER (state: $ISSUE_STATE)"
            
            # Count status labels
            STATUS_LABELS=$(echo "$LABELS" | grep -E "^(backlog|ready|in-progress|in-review|done)$" | wc -l)
            
            if [ "$STATUS_LABELS" -eq 0 ]; then
              echo "‚ùå No status labels found - adding default"
              if [ "$ISSUE_STATE" = "closed" ]; then
                echo "  Adding 'done' label to closed issue"
                curl -s -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Content-Type: application/json" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
                  -d '{"labels":["done"]}'
              else
                echo "  Adding 'backlog' label to open issue"
                curl -s -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Content-Type: application/json" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
                  -d '{"labels":["backlog"]}'
              fi
              
            elif [ "$STATUS_LABELS" -gt 1 ]; then
              echo "‚ö†Ô∏è  Multiple status labels found - cleaning up"
              # Keep only the most recent label based on priority
              HAS_DONE=$(echo "$LABELS" | grep -q "^done$" && echo "yes" || echo "no")
              HAS_REVIEW=$(echo "$LABELS" | grep -q "^in-review$" && echo "yes" || echo "no")
              HAS_PROGRESS=$(echo "$LABELS" | grep -q "^in-progress$" && echo "yes" || echo "no")
              HAS_READY=$(echo "$LABELS" | grep -q "^ready$" && echo "yes" || echo "no")
              HAS_BACKLOG=$(echo "$LABELS" | grep -q "^backlog$" && echo "yes" || echo "no")
              
              # Remove all status labels first
              for label in backlog ready in-progress in-review done; do
                curl -s -X DELETE \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/$label" 2>/dev/null || true
              done
              
              # Add back the highest priority label
              KEEP_LABEL=""
              if [ "$HAS_DONE" = "yes" ]; then
                KEEP_LABEL="done"
              elif [ "$HAS_REVIEW" = "yes" ]; then
                KEEP_LABEL="in-review"
              elif [ "$HAS_PROGRESS" = "yes" ]; then
                KEEP_LABEL="in-progress"
              elif [ "$HAS_READY" = "yes" ]; then
                KEEP_LABEL="ready"
              elif [ "$HAS_BACKLOG" = "yes" ]; then
                KEEP_LABEL="backlog"
              fi
              
              if [ -n "$KEEP_LABEL" ]; then
                echo "  Keeping highest priority label: $KEEP_LABEL"
                curl -s -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Content-Type: application/json" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
                  -d "{\"labels\":[\"$KEEP_LABEL\"]}"
              fi
              
            else
              CURRENT_STATUS=$(echo "$LABELS" | grep -E "^(backlog|ready|in-progress|in-review|done)$")
              echo "‚úÖ Issue has correct single status: $CURRENT_STATUS"
              
              # Verify state consistency
              if [ "$ISSUE_STATE" = "closed" ] && [ "$CURRENT_STATUS" != "done" ]; then
                echo "  üîÑ Closed issue should have 'done' label - fixing"
                curl -s -X DELETE \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/$CURRENT_STATUS" || true
                curl -s -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Content-Type: application/json" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
                  -d '{"labels":["done"]}'
              elif [ "$ISSUE_STATE" = "open" ] && [ "$CURRENT_STATUS" = "done" ]; then
                echo "  üîÑ Open issue shouldn't have 'done' label - fixing"
                curl -s -X DELETE \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/done" || true
                curl -s -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Content-Type: application/json" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
                  -d '{"labels":["backlog"]}'
              fi
            fi
            
            sleep 0.5  # Rate limiting
          done
          
          echo ""
          echo "üéâ Label synchronization completed!"

  # Manual single issue check
  check-single-issue:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.action == 'check_single_issue' && 
      github.event.inputs.issue_number != ''
    
    steps:
      - name: Check Single Issue
        run: |
          ISSUE_NUMBER="${{ github.event.inputs.issue_number }}"
          echo "üîç Checking issue #$ISSUE_NUMBER"
          
          ISSUE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER")
          
          echo "üìä Current Status:"
          echo "  Title: $(echo "$ISSUE_DATA" | jq -r '.title')"
          echo "  State: $(echo "$ISSUE_DATA" | jq -r '.state')"
          echo "  Labels: $(echo "$ISSUE_DATA" | jq -r '.labels[].name' | tr '\n' ', ' | sed 's/,$//')"
          echo "  Updated: $(echo "$ISSUE_DATA" | jq -r '.updated_at')"
          echo ""
          echo "üí° Available commands:"
          echo "  /status backlog     - Move to backlog"
          echo "  /status ready       - Ready to work on"  
          echo "  /status in-progress - Currently working"
          echo "  /status in-review   - Under review"
          echo "  /status done        - Complete (closes issue)"

  # Update existing issues (manual only)
  update-existing:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'update_existing_issues'
    
    steps:
      - name: Update All Existing Issues
        run: |
          echo "üîÑ Adding default labels to issues without status labels..."
          
          # Open issues without status labels get backlog
          OPEN_ISSUES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues?state=open&per_page=100" | \
            jq -r '.[] | select(.labels | map(.name) | index("backlog") == null and index("ready") == null and index("in-progress") == null and index("in-review") == null and index("done") == null) | .number')
          
          for issue in $OPEN_ISSUES; do
            echo "Adding backlog to open issue #$issue"
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$issue/labels" \
              -d '{"labels":["backlog"]}'
            sleep 0.5
          done
          
          # Closed issues without status labels get done
          CLOSED_ISSUES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues?state=closed&per_page=50" | \
            jq -r '.[] | select(.labels | map(.name) | index("backlog") == null and index("ready") == null and index("in-progress") == null and index("in-review") == null and index("done") == null) | .number')
          
          for issue in $CLOSED_ISSUES; do
            echo "Adding done to closed issue #$issue"
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$issue/labels" \
              -d '{"labels":["done"]}'
            sleep 0.5
          done
          
          echo "‚úÖ All existing issues updated!"
