name: ProjectsV2 GraphQL Kanban Management

permissions:
  issues: write
  contents: read

on:
  issues:
    types: [opened, closed, reopened]
  schedule:
    # Check project status every 10 minutes
    - cron: '*/10 * * * *'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        default: 'sync_projects'
        options:
          - 'sync_projects'
          - 'debug_project_structure'
          - 'update_existing_issues'
      project_number:
        description: 'Project number to sync (default: 1)'
        required: false
        default: '1'

jobs:
  # Handle new issues
  assign-new-issues:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    
    steps:
      - name: Add Backlog Label to New Issues
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          echo "üÜï Adding backlog label to new issue #$ISSUE_NUMBER"
          
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
            -d '{"labels":["backlog"]}'

  # Handle closed/reopened issues
  handle-state-changes:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && (github.event.action == 'closed' || github.event.action == 'reopened')
    
    steps:
      - name: Update Status for State Changes
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          ACTION="${{ github.event.action }}"
          
          if [ "$ACTION" = "closed" ]; then
            echo "üîí Setting closed issue to 'done'"
            for label in backlog ready in-progress in-review; do
              curl -s -X DELETE \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/$label" 2>/dev/null || true
            done
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
              -d '{"labels":["done"]}'
              
          elif [ "$ACTION" = "reopened" ]; then
            echo "üîì Setting reopened issue back to 'backlog'"
            curl -s -X DELETE \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/done" 2>/dev/null || true
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
              -d '{"labels":["backlog"]}'
          fi

  # Debug project structure
  debug-project-structure:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.action == 'debug_project_structure'
    
    steps:
      - name: Debug ProjectsV2 Structure
        run: |
          PROJECT_NUM="${{ github.event.inputs.project_number }}"
          echo "üîç Debugging ProjectsV2 structure for project #$PROJECT_NUM"
          echo "========================================="
          
          # Step 1: Get all accessible projects using viewer query
          echo "üìã Step 1: Finding all accessible ProjectsV2..."
          
          PROJECTS_QUERY='{
            "query": "query {
              viewer {
                projectsV2(first: 20) {
                  nodes {
                    id
                    title
                    number
                    url
                    shortDescription
                    public
                    closed
                    createdAt
                    updatedAt
                  }
                }
              }
            }"
          }'
          
          PROJECTS_RESPONSE=$(curl -s -X POST \
            -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://api.github.com/graphql" \
            -d "$PROJECTS_QUERY")
          
          echo "Projects found:"
          echo "$PROJECTS_RESPONSE" | jq '.'
          
          # Find the target project
          TARGET_PROJECT=$(echo "$PROJECTS_RESPONSE" | jq --arg num "$PROJECT_NUM" '
            .data.viewer.projectsV2.nodes[] | select(.number == ($num | tonumber))')
          
          if [ -n "$TARGET_PROJECT" ] && [ "$TARGET_PROJECT" != "null" ]; then
            PROJECT_ID=$(echo "$TARGET_PROJECT" | jq -r '.id')
            PROJECT_TITLE=$(echo "$TARGET_PROJECT" | jq -r '.title')
            
            echo ""
            echo "‚úÖ Found target project #$PROJECT_NUM: $PROJECT_TITLE"
            echo "Project ID: $PROJECT_ID"
            echo "Project URL: $(echo "$TARGET_PROJECT" | jq -r '.url')"
            
            # Step 2: Get project fields (following the gist pattern)
            echo ""
            echo "üìä Step 2: Getting project fields..."
            
            FIELDS_QUERY='{
              "query": "query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                          dataType
                        }
                        ... on ProjectV2IterationField {
                          id
                          name
                          dataType
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          dataType
                          options {
                            id
                            name
                            color
                          }
                        }
                      }
                    }
                  }
                }
              }",
              "variables": {
                "projectId": "'$PROJECT_ID'"
              }
            }'
            
            FIELDS_RESPONSE=$(curl -s -X POST \
              -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              "https://api.github.com/graphql" \
              -d "$FIELDS_QUERY")
            
            echo "Project fields:"
            echo "$FIELDS_RESPONSE" | jq '.'
            
            # Look for Status field specifically
            STATUS_FIELD=$(echo "$FIELDS_RESPONSE" | jq '.data.node.fields.nodes[] | select(.name == "Status")')
            if [ -n "$STATUS_FIELD" ] && [ "$STATUS_FIELD" != "null" ]; then
              echo ""
              echo "üéØ Found Status field:"
              echo "$STATUS_FIELD" | jq '.'
              
              STATUS_FIELD_ID=$(echo "$STATUS_FIELD" | jq -r '.id')
              echo "Status Field ID: $STATUS_FIELD_ID"
              
              echo "Status options:"
              echo "$STATUS_FIELD" | jq -r '.options[]? | "  - " + .name + " (ID: " + .id + ", Color: " + .color + ")"'
            fi
            
            # Step 3: Get project items with field values
            echo ""
            echo "üìã Step 3: Getting project items..."
            
            ITEMS_QUERY='{
              "query": "query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        type
                        content {
                          ... on Issue {
                            number
                            title
                            state
                            url
                            repository {
                              name
                              owner {
                                login
                              }
                            }
                          }
                        }
                        fieldValues(first: 20) {
                          nodes {
                            ... on ProjectV2ItemFieldTextValue {
                              text
                              field {
                                ... on ProjectV2FieldCommon {
                                  name
                                }
                              }
                            }
                            ... on ProjectV2ItemFieldNumberValue {
                              number
                              field {
                                ... on ProjectV2FieldCommon {
                                  name
                                }
                              }
                            }
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              name
                              optionId
                              field {
                                ... on ProjectV2FieldCommon {
                                  name
                                }
                              }
                            }
                            ... on ProjectV2ItemFieldDateValue {
                              date
                              field {
                                ... on ProjectV2FieldCommon {
                                  name
                                }
                              }
                            }
                            ... on ProjectV2ItemFieldIterationValue {
                              title
                              field {
                                ... on ProjectV2FieldCommon {
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }",
              "variables": {
                "projectId": "'$PROJECT_ID'"
              }
            }'
            
            ITEMS_RESPONSE=$(curl -s -X POST \
              -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              "https://api.github.com/graphql" \
              -d "$ITEMS_QUERY")
            
            echo "Project items:"
            echo "$ITEMS_RESPONSE" | jq '.'
            
            # Filter for issues from this repository
            REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
            OWNER_NAME=$(echo ${{ github.repository }} | cut -d'/' -f1)
            
            echo ""
            echo "üîç Issues from repository ${{ github.repository }}:"
            
            echo "$ITEMS_RESPONSE" | jq -c --arg repo "$REPO_NAME" --arg owner "$OWNER_NAME" '
              .data.node.items.nodes[] | 
              select(.content.repository.name == $repo and .content.repository.owner.login == $owner)' | \
            while IFS= read -r item; do
              ISSUE_NUM=$(echo "$item" | jq -r '.content.number')
              ISSUE_TITLE=$(echo "$item" | jq -r '.content.title')
              ISSUE_STATE=$(echo "$item" | jq -r '.content.state')
              
              echo "  üìã Issue #$ISSUE_NUM: $ISSUE_TITLE (State: $ISSUE_STATE)"
              
              # Show all field values
              echo "    Field values:"
              echo "$item" | jq -r '.fieldValues.nodes[] | 
                if .field.name then
                  "      " + .field.name + ": " + (.name // .text // (.number | tostring) // .date // .title // "null")
                else
                  empty
                end'
            done
          else
            echo "‚ùå Project #$PROJECT_NUM not found"
            echo "Available projects:"
            echo "$PROJECTS_RESPONSE" | jq -r '.data.viewer.projectsV2.nodes[]? | "  - #" + (.number | tostring) + ": " + .title'
          fi

  # Sync projects using ProjectsV2 GraphQL
  sync-projects:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'sync_projects')
    
    steps:
      - name: Sync ProjectsV2 Items
        run: |
          PROJECT_NUM="${{ github.event.inputs.project_number }}"
          if [ -z "$PROJECT_NUM" ]; then
            PROJECT_NUM="1"
          fi
          
          REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
          OWNER_NAME=$(echo ${{ github.repository }} | cut -d'/' -f1)
          
          echo "üîÑ Syncing ProjectsV2 #$PROJECT_NUM..."
          
          # Get all accessible projects
          PROJECTS_QUERY='{
            "query": "query {
              viewer {
                projectsV2(first: 20) {
                  nodes {
                    id
                    title
                    number
                  }
                }
              }
            }"
          }'
          
          PROJECTS_RESPONSE=$(curl -s -X POST \
            -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://api.github.com/graphql" \
            -d "$PROJECTS_QUERY")
          
          # Find target project
          PROJECT_ID=$(echo "$PROJECTS_RESPONSE" | jq -r --arg num "$PROJECT_NUM" '
            .data.viewer.projectsV2.nodes[] | select(.number == ($num | tonumber)) | .id')
          
          if [ -n "$PROJECT_ID" ] && [ "$PROJECT_ID" != "null" ]; then
            echo "‚úÖ Found project #$PROJECT_NUM (ID: $PROJECT_ID)"
            
            # Get project items with field values
            ITEMS_QUERY='{
              "query": "query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            number
                            title
                            state
                            repository {
                              name
                              owner {
                                login
                              }
                            }
                          }
                        }
                        fieldValues(first: 20) {
                          nodes {
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              name
                              field {
                                ... on ProjectV2FieldCommon {
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }",
              "variables": {
                "projectId": "'$PROJECT_ID'"
              }
            }'
            
            ITEMS_RESPONSE=$(curl -s -X POST \
              -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              "https://api.github.com/graphql" \
              -d "$ITEMS_QUERY")
            
            # Process repository issues
            echo "$ITEMS_RESPONSE" | jq -c --arg repo "$REPO_NAME" --arg owner "$OWNER_NAME" '
              .data.node.items.nodes[] | 
              select(.content.repository.name == $repo and .content.repository.owner.login == $owner)' | \
            while IFS= read -r item; do
              ISSUE_NUMBER=$(echo "$item" | jq -r '.content.number')
              ISSUE_STATE=$(echo "$item" | jq -r '.content.state')
              
              # Get Status field value
              PROJECT_STATUS=$(echo "$item" | jq -r '
                .fieldValues.nodes[] | 
                select(.field.name == "Status") | 
                .name // empty')
              
              if [ -n "$PROJECT_STATUS" ]; then
                echo "üîç Issue #$ISSUE_NUMBER has Status: '$PROJECT_STATUS'"
                
                # Map project status to label
                case "$PROJECT_STATUS" in
                  "Backlog"|"Todo"|"To Do"|"New"|"üìã Backlog")
                    EXPECTED_LABEL="backlog"
                    ;;
                  "Ready"|"Ready to Start"|"üèÅ Ready")
                    EXPECTED_LABEL="ready"
                    ;;
                  "In Progress"|"In-Progress"|"Working"|"Active"|"üöß In Progress")
                    EXPECTED_LABEL="in-progress"
                    ;;
                  "In Review"|"Review"|"Testing"|"QA"|"üëÄ In Review")
                    EXPECTED_LABEL="in-review"
                    ;;
                  "Done"|"Complete"|"Completed"|"Closed"|"‚úÖ Done")
                    EXPECTED_LABEL="done"
                    ;;
                  *)
                    echo "‚ùì Unknown status: '$PROJECT_STATUS' - skipping"
                    continue
                    ;;
                esac
                
                # Get current issue labels
                CURRENT_ISSUE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER")
                
                CURRENT_LABELS=$(echo "$CURRENT_ISSUE" | jq -r '.labels[].name')
                
                # Check if update needed
                if echo "$CURRENT_LABELS" | grep -q "^$EXPECTED_LABEL$"; then
                  echo "‚úÖ Issue #$ISSUE_NUMBER already has correct label: $EXPECTED_LABEL"
                else
                  echo "üîÑ Updating issue #$ISSUE_NUMBER to label: $EXPECTED_LABEL (from status: $PROJECT_STATUS)"
                  
                  # Remove old status labels
                  for label in backlog ready in-progress in-review done; do
                    curl -s -X DELETE \
                      -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      -H "Accept: application/vnd.github.v3+json" \
                      "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/$label" 2>/dev/null || true
                  done
                  
                  # Add new label
                  curl -s -X POST \
                    -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Accept: application/vnd.github.v3+json" \
                    -H "Content-Type: application/json" \
                    "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
                    -d "{\"labels\":[\"$EXPECTED_LABEL\"]}"
                  
                  # Handle issue state based on project status
                  if [ "$EXPECTED_LABEL" = "done" ] && [ "$ISSUE_STATE" = "OPEN" ]; then
                    echo "  üîí Closing issue (project status is Done)"
                    curl -s -X PATCH \
                      -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      -H "Accept: application/vnd.github.v3+json" \
                      -H "Content-Type: application/json" \
                      "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER" \
                      -d '{"state":"closed"}'
                  elif [ "$EXPECTED_LABEL" != "done" ] && [ "$ISSUE_STATE" = "CLOSED" ]; then
                    echo "  üîì Reopening issue (project status is not Done)"
                    curl -s -X PATCH \
                      -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      -H "Accept: application/vnd.github.v3+json" \
                      -H "Content-Type: application/json" \
                      "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER" \
                      -d '{"state":"open"}'
                  fi
                  
                  echo "  ‚úÖ Issue #$ISSUE_NUMBER synced successfully!"
                fi
              else
                echo "üìù Issue #$ISSUE_NUMBER has no Status field set in project"
              fi
              
              sleep 0.5  # Rate limiting
            done
            
            echo "üéâ ProjectsV2 sync completed!"
          else
            echo "‚ùå Could not find project #$PROJECT_NUM"
            echo "Available projects:"
            echo "$PROJECTS_RESPONSE" | jq -r '.data.viewer.projectsV2.nodes[]? | "  - #" + (.number | tostring) + ": " + .title'
          fi

  # Update existing issues
  update-existing:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'update_existing_issues'
    
    steps:
      - name: Add Default Labels
        run: |
          echo "üîÑ Adding default labels to issues without status labels..."
          
          # Open issues get backlog
          OPEN_ISSUES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues?state=open&per_page=100" | \
            jq -r '.[] | select(.labels | map(.name) | index("backlog") == null and index("ready") == null and index("in-progress") == null and index("in-review") == null and index("done") == null) | .number')
          
          for issue in $OPEN_ISSUES; do
            echo "Adding backlog to open issue #$issue"
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$issue/labels" \
              -d '{"labels":["backlog"]}'
            sleep 0.5
          done
          
          echo "‚úÖ Done!"
