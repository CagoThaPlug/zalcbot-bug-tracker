name: ProjectsV2 with PAT Token

permissions:
  issues: write
  contents: read

on:
  issues:
    types: [opened, closed, reopened]
  schedule:
    # Check project status every 10 minutes
    - cron: '*/10 * * * *'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        default: 'sync_projects'
        options:
          - 'sync_projects'
          - 'debug_project_structure'
          - 'test_token_access'
          - 'update_existing_issues'
      project_number:
        description: 'Project number to sync (default: 1)'
        required: false
        default: '1'

jobs:
  # Handle new issues
  assign-new-issues:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    
    steps:
      - name: Add Backlog Label to New Issues
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          echo "üÜï Adding backlog label to new issue #$ISSUE_NUMBER"
          
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
            -d '{"labels":["backlog"]}'

  # Handle closed/reopened issues
  handle-state-changes:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && (github.event.action == 'closed' || github.event.action == 'reopened')
    
    steps:
      - name: Update Status for State Changes
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          ACTION="${{ github.event.action }}"
          
          if [ "$ACTION" = "closed" ]; then
            echo "üîí Setting closed issue to 'done'"
            for label in backlog ready in-progress in-review; do
              curl -s -X DELETE \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/$label" 2>/dev/null || true
            done
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
              -d '{"labels":["done"]}'
              
          elif [ "$ACTION" = "reopened" ]; then
            echo "üîì Setting reopened issue back to 'backlog'"
            curl -s -X DELETE \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/done" 2>/dev/null || true
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
              -d '{"labels":["backlog"]}'
          fi

  # Test token access
  test-token-access:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.action == 'test_token_access'
    
    steps:
      - name: Test PAT Token Access
        run: |
          echo "üîç Testing PAT token access..."
          echo "==============================="
          
          # Check if PAT token exists
          if [ -z "${{ secrets.PROJECTS_PAT }}" ]; then
            echo "‚ùå PROJECTS_PAT secret not found!"
            echo ""
            echo "To fix this:"
            echo "1. Go to GitHub Settings ‚Üí Developer settings ‚Üí Personal access tokens"
            echo "2. Create a new token with 'project' and 'repo' scopes"
            echo "3. Add it as a repository secret named 'PROJECTS_PAT'"
            echo ""
            echo "üìö Documentation: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"
            exit 1
          fi
          
          echo "‚úÖ PROJECTS_PAT secret exists"
          
          # Test basic GraphQL access
          echo "üß™ Testing basic GraphQL access..."
          
          TEST_QUERY='{"query": "query { viewer { login } }"}'
          
          VIEWER_RESPONSE=$(curl -s -X POST \
            -H "Authorization: bearer ${{ secrets.PROJECTS_PAT }}" \
            -H "Content-Type: application/json" \
            "https://api.github.com/graphql" \
            -d "$TEST_QUERY")
          
          echo "Viewer response:"
          echo "$VIEWER_RESPONSE" | jq '.'
          
          if echo "$VIEWER_RESPONSE" | jq -e '.data.viewer.login' >/dev/null; then
            VIEWER_LOGIN=$(echo "$VIEWER_RESPONSE" | jq -r '.data.viewer.login')
            echo "‚úÖ PAT token works! Authenticated as: $VIEWER_LOGIN"
          else
            echo "‚ùå PAT token authentication failed"
            echo "Check that your token has the correct scopes: 'project' and 'repo'"
            exit 1
          fi
          
          # Test projects access
          echo ""
          echo "üß™ Testing ProjectsV2 access..."
          
          PROJECTS_QUERY='{"query": "query { viewer { projectsV2(first: 5) { nodes { id title number } } } }"}'
          
          PROJECTS_RESPONSE=$(curl -s -X POST \
            -H "Authorization: bearer ${{ secrets.PROJECTS_PAT }}" \
            -H "Content-Type: application/json" \
            "https://api.github.com/graphql" \
            -d "$PROJECTS_QUERY")
          
          echo "Projects response:"
          echo "$PROJECTS_RESPONSE" | jq '.'
          
          if echo "$PROJECTS_RESPONSE" | jq -e '.data.viewer.projectsV2' >/dev/null; then
            PROJECT_COUNT=$(echo "$PROJECTS_RESPONSE" | jq '.data.viewer.projectsV2.nodes | length')
            echo "‚úÖ ProjectsV2 access works! Found $PROJECT_COUNT projects"
            
            if [ "$PROJECT_COUNT" -gt 0 ]; then
              echo "Available projects:"
              echo "$PROJECTS_RESPONSE" | jq -r '.data.viewer.projectsV2.nodes[] | "  - #" + (.number | tostring) + ": " + .title'
            else
              echo "‚ö†Ô∏è  No projects found - make sure you have projects created"
            fi
          else
            echo "‚ùå ProjectsV2 access failed"
            echo "Make sure your PAT has the 'project' scope"
            exit 1
          fi
          
          echo ""
          echo "üéâ All tests passed! Your PAT is properly configured."

  # Debug project structure with PAT
  debug-project-structure:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.action == 'debug_project_structure'
    
    steps:
      - name: Check PAT Token
        run: |
          if [ -z "${{ secrets.PROJECTS_PAT }}" ]; then
            echo "‚ùå PROJECTS_PAT secret not found!"
            echo "Please add your Personal Access Token as a repository secret named 'PROJECTS_PAT'"
            exit 1
          fi
          echo "‚úÖ PROJECTS_PAT secret exists"

      - name: Debug ProjectsV2 Structure with PAT
        run: |
          PROJECT_NUM="${{ github.event.inputs.project_number }}"
          echo "üîç Debugging ProjectsV2 structure for project #$PROJECT_NUM using PAT"
          echo "======================================"
          
          # Get all accessible projects
          PROJECTS_QUERY='{"query": "query { viewer { projectsV2(first: 20) { nodes { id title number url shortDescription } } } }"}'
          
          PROJECTS_RESPONSE=$(curl -s -X POST \
            -H "Authorization: bearer ${{ secrets.PROJECTS_PAT }}" \
            -H "Content-Type: application/json" \
            "https://api.github.com/graphql" \
            -d "$PROJECTS_QUERY")
          
          echo "üìã All accessible projects:"
          echo "$PROJECTS_RESPONSE" | jq '.'
          
          # Find the target project
          TARGET_PROJECT=$(echo "$PROJECTS_RESPONSE" | jq --arg num "$PROJECT_NUM" '
            .data.viewer.projectsV2.nodes[] | select(.number == ($num | tonumber))')
          
          if [ -n "$TARGET_PROJECT" ] && [ "$TARGET_PROJECT" != "null" ]; then
            PROJECT_ID=$(echo "$TARGET_PROJECT" | jq -r '.id')
            PROJECT_TITLE=$(echo "$TARGET_PROJECT" | jq -r '.title')
            
            echo ""
            echo "‚úÖ Found project #$PROJECT_NUM: $PROJECT_TITLE"
            echo "Project ID: $PROJECT_ID"
            echo "Project URL: $(echo "$TARGET_PROJECT" | jq -r '.url')"
            
            # Get project fields
            echo ""
            echo "üìä Project fields:"
            
            FIELDS_QUERY='{
              "query": "query($projectId: ID!) { node(id: $projectId) { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2Field { id name dataType } ... on ProjectV2SingleSelectField { id name dataType options { id name color } } } } } } }",
              "variables": { "projectId": "'$PROJECT_ID'" }
            }'
            
            FIELDS_RESPONSE=$(curl -s -X POST \
              -H "Authorization: bearer ${{ secrets.PROJECTS_PAT }}" \
              -H "Content-Type: application/json" \
              "https://api.github.com/graphql" \
              -d "$FIELDS_QUERY")
            
            echo "$FIELDS_RESPONSE" | jq '.'
            
            # Get project items
            echo ""
            echo "üìã Project items:"
            
            ITEMS_QUERY='{
              "query": "query($projectId: ID!) { node(id: $projectId) { ... on ProjectV2 { items(first: 50) { nodes { id content { ... on Issue { number title state repository { name owner { login } } } } fieldValues(first: 20) { nodes { ... on ProjectV2ItemFieldSingleSelectValue { name field { ... on ProjectV2FieldCommon { name } } } } } } } } } }",
              "variables": { "projectId": "'$PROJECT_ID'" }
            }'
            
            ITEMS_RESPONSE=$(curl -s -X POST \
              -H "Authorization: bearer ${{ secrets.PROJECTS_PAT }}" \
              -H "Content-Type: application/json" \
              "https://api.github.com/graphql" \
              -d "$ITEMS_QUERY")
            
            echo "$ITEMS_RESPONSE" | jq '.'
            
            # Filter for repository issues
            REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
            OWNER_NAME=$(echo ${{ github.repository }} | cut -d'/' -f1)
            
            echo ""
            echo "üîç Issues from ${{ github.repository }}:"
            
            echo "$ITEMS_RESPONSE" | jq -c --arg repo "$REPO_NAME" --arg owner "$OWNER_NAME" '
              .data.node.items.nodes[] | 
              select(.content.repository.name == $repo and .content.repository.owner.login == $owner)' | \
            while IFS= read -r item; do
              ISSUE_NUM=$(echo "$item" | jq -r '.content.number')
              ISSUE_TITLE=$(echo "$item" | jq -r '.content.title')
              STATUS_VALUE=$(echo "$item" | jq -r '.fieldValues.nodes[] | select(.field.name == "Status") | .name // empty')
              
              echo "  üìã Issue #$ISSUE_NUM: $ISSUE_TITLE"
              if [ -n "$STATUS_VALUE" ]; then
                echo "    üéØ Status: $STATUS_VALUE"
              else
                echo "    ‚ùì No Status field set"
              fi
            done
          else
            echo "‚ùå Project #$PROJECT_NUM not found"
            echo "Available projects:"
            echo "$PROJECTS_RESPONSE" | jq -r '.data.viewer.projectsV2.nodes[]? | "  - #" + (.number | tostring) + ": " + .title'
          fi

  # Sync projects using PAT
  sync-projects:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'sync_projects')
    
    steps:
      - name: Check PAT Token
        run: |
          if [ -z "${{ secrets.PROJECTS_PAT }}" ]; then
            echo "‚ùå PROJECTS_PAT secret not found! Please add your PAT token first."
            exit 1
          fi

      - name: Sync ProjectsV2 Items with PAT
        run: |
          PROJECT_NUM="${{ github.event.inputs.project_number }}"
          if [ -z "$PROJECT_NUM" ]; then
            PROJECT_NUM="1"
          fi
          
          REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
          OWNER_NAME=$(echo ${{ github.repository }} | cut -d'/' -f1)
          
          echo "üîÑ Syncing ProjectsV2 #$PROJECT_NUM using PAT..."
          
          # Get project by number
          PROJECTS_QUERY='{"query": "query { viewer { projectsV2(first: 20) { nodes { id title number } } } }"}'
          
          PROJECTS_RESPONSE=$(curl -s -X POST \
            -H "Authorization: bearer ${{ secrets.PROJECTS_PAT }}" \
            -H "Content-Type: application/json" \
            "https://api.github.com/graphql" \
            -d "$PROJECTS_QUERY")
          
          PROJECT_ID=$(echo "$PROJECTS_RESPONSE" | jq -r --arg num "$PROJECT_NUM" '
            .data.viewer.projectsV2.nodes[] | select(.number == ($num | tonumber)) | .id')
          
          if [ -n "$PROJECT_ID" ] && [ "$PROJECT_ID" != "null" ]; then
            echo "‚úÖ Found project #$PROJECT_NUM (ID: $PROJECT_ID)"
            
            # Get project items
            ITEMS_QUERY='{
              "query": "query($projectId: ID!) { node(id: $projectId) { ... on ProjectV2 { items(first: 100) { nodes { id content { ... on Issue { number title state repository { name owner { login } } } } fieldValues(first: 20) { nodes { ... on ProjectV2ItemFieldSingleSelectValue { name field { ... on ProjectV2FieldCommon { name } } } } } } } } } }",
              "variables": { "projectId": "'$PROJECT_ID'" }
            }'
            
            ITEMS_RESPONSE=$(curl -s -X POST \
              -H "Authorization: bearer ${{ secrets.PROJECTS_PAT }}" \
              -H "Content-Type: application/json" \
              "https://api.github.com/graphql" \
              -d "$ITEMS_QUERY")
            
            # Process repository issues
            echo "$ITEMS_RESPONSE" | jq -c --arg repo "$REPO_NAME" --arg owner "$OWNER_NAME" '
              .data.node.items.nodes[] | 
              select(.content.repository.name == $repo and .content.repository.owner.login == $owner)' | \
            while IFS= read -r item; do
              ISSUE_NUMBER=$(echo "$item" | jq -r '.content.number')
              ISSUE_STATE=$(echo "$item" | jq -r '.content.state')
              PROJECT_STATUS=$(echo "$item" | jq -r '.fieldValues.nodes[] | select(.field.name == "Status") | .name // empty')
              
              if [ -n "$PROJECT_STATUS" ]; then
                echo "üîç Issue #$ISSUE_NUMBER Status: '$PROJECT_STATUS'"
                
                # Map project status to label
                case "$PROJECT_STATUS" in
                  "Backlog"|"Todo"|"To Do"|"New")
                    EXPECTED_LABEL="backlog"
                    ;;
                  "Ready"|"Ready to Start")
                    EXPECTED_LABEL="ready"
                    ;;
                  "In Progress"|"In-Progress"|"Working"|"Active")
                    EXPECTED_LABEL="in-progress"
                    ;;
                  "In Review"|"Review"|"Testing"|"QA")
                    EXPECTED_LABEL="in-review"
                    ;;
                  "Done"|"Complete"|"Completed"|"Closed")
                    EXPECTED_LABEL="done"
                    ;;
                  *)
                    echo "‚ùì Unknown status: '$PROJECT_STATUS'"
                    continue
                    ;;
                esac
                
                # Get current labels
                CURRENT_ISSUE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER")
                
                CURRENT_LABELS=$(echo "$CURRENT_ISSUE" | jq -r '.labels[].name')
                
                # Update if needed
                if echo "$CURRENT_LABELS" | grep -q "^$EXPECTED_LABEL$"; then
                  echo "‚úÖ Issue #$ISSUE_NUMBER already correct: $EXPECTED_LABEL"
                else
                  echo "üîÑ Updating #$ISSUE_NUMBER: $PROJECT_STATUS ‚Üí $EXPECTED_LABEL"
                  
                  # Remove old labels
                  for label in backlog ready in-progress in-review done; do
                    curl -s -X DELETE \
                      -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      -H "Accept: application/vnd.github.v3+json" \
                      "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels/$label" 2>/dev/null || true
                  done
                  
                  # Add new label
                  curl -s -X POST \
                    -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Accept: application/vnd.github.v3+json" \
                    -H "Content-Type: application/json" \
                    "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/labels" \
                    -d "{\"labels\":[\"$EXPECTED_LABEL\"]}"
                  
                  # Handle issue state
                  if [ "$EXPECTED_LABEL" = "done" ] && [ "$ISSUE_STATE" = "OPEN" ]; then
                    curl -s -X PATCH \
                      -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      -H "Accept: application/vnd.github.v3+json" \
                      -H "Content-Type: application/json" \
                      "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER" \
                      -d '{"state":"closed"}'
                    echo "    üîí Issue closed"
                  elif [ "$EXPECTED_LABEL" != "done" ] && [ "$ISSUE_STATE" = "CLOSED" ]; then
                    curl -s -X PATCH \
                      -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      -H "Accept: application/vnd.github.v3+json" \
                      -H "Content-Type: application/json" \
                      "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER" \
                      -d '{"state":"open"}'
                    echo "    üîì Issue reopened"
                  fi
                  
                  echo "    ‚úÖ Updated!"
                fi
              fi
              sleep 0.5
            done
            
            echo "üéâ Sync completed!"
          else
            echo "‚ùå Project #$PROJECT_NUM not found"
          fi

  # Update existing issues
  update-existing:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'update_existing_issues'
    
    steps:
      - name: Add Default Labels
        run: |
          echo "üîÑ Adding default labels to issues without status labels..."
          
          OPEN_ISSUES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues?state=open&per_page=100" | \
            jq -r '.[] | select(.labels | map(.name) | index("backlog") == null and index("ready") == null and index("in-progress") == null and index("in-review") == null and index("done") == null) | .number')
          
          for issue in $OPEN_ISSUES; do
            echo "Adding backlog to open issue #$issue"
            curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$issue/labels" \
              -d '{"labels":["backlog"]}'
            sleep 0.5
          done
          
          echo "‚úÖ Done!"
